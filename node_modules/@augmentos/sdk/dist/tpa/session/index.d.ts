import { EventManager } from './events';
import { LayoutManager } from './layouts';
import { StreamType, ButtonPress, HeadPosition, PhoneNotification, TranscriptionData } from '../../types';
/**
 * ⚙️ Configuration options for TPA Session
 *
 * @example
 * ```typescript
 * const config: TpaSessionConfig = {
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key',
 *   autoReconnect: true
 * };
 * ```
 */
export interface TpaSessionConfig {
    /** 📦 Unique identifier for your TPA (e.g., 'org.company.appname') */
    packageName: string;
    /** 🔑 API key for authentication with AugmentOS Cloud */
    apiKey: string;
    /** 🔌 WebSocket server URL (default: 'ws://localhost:7002/tpa-ws') */
    augmentOSWebsocketUrl?: string;
    /** 🔄 Automatically attempt to reconnect on disconnect (default: true) */
    autoReconnect?: boolean;
    /** 🔁 Maximum number of reconnection attempts (default: 5) */
    maxReconnectAttempts?: number;
    /** ⏱️ Base delay between reconnection attempts in ms (default: 1000) */
    reconnectDelay?: number;
}
/**
 * 🚀 TPA Session Implementation
 *
 * Manages a live connection between your TPA and AugmentOS Cloud.
 * Provides interfaces for:
 * - 🎮 Event handling (transcription, head position, etc.)
 * - 📱 Display management in AR view
 * - 🔌 Connection lifecycle
 * - 🔄 Automatic reconnection
 *
 * @example
 * ```typescript
 * const session = new TpaSession({
 *   packageName: 'org.example.myapp',
 *   apiKey: 'your_api_key'
 * });
 *
 * // Handle events
 * session.onTranscription((data) => {
 *   session.layouts.showTextWall(data.text);
 * });
 *
 * // Connect to cloud
 * await session.connect('session_123');
 * ```
 */
export declare class TpaSession {
    private config;
    /** WebSocket connection to AugmentOS Cloud */
    private ws;
    /** Current session identifier */
    private sessionId;
    /** Number of reconnection attempts made */
    private reconnectAttempts;
    /** Active event subscriptions */
    private subscriptions;
    /** 🎮 Event management interface */
    readonly events: EventManager;
    /** 📱 Layout management interface */
    readonly layouts: LayoutManager;
    constructor(config: TpaSessionConfig);
    /**
     * 🎤 Listen for speech transcription events
     * @param handler - Function to handle transcription data
     * @returns Cleanup function to remove the handler
     */
    onTranscription(handler: (data: TranscriptionData) => void): () => void;
    /**
     * 👤 Listen for head position changes
     * @param handler - Function to handle head position updates
     * @returns Cleanup function to remove the handler
     */
    onHeadPosition(handler: (data: HeadPosition) => void): () => void;
    /**
     * 🔘 Listen for hardware button press events
     * @param handler - Function to handle button events
     * @returns Cleanup function to remove the handler
     */
    onButtonPress(handler: (data: ButtonPress) => void): () => void;
    /**
     * 📱 Listen for phone notification events
     * @param handler - Function to handle notifications
     * @returns Cleanup function to remove the handler
     */
    onPhoneNotifications(handler: (data: PhoneNotification) => void): () => void;
    /**
     * 📬 Subscribe to a specific event stream
     * @param type - Type of event to subscribe to
     */
    subscribe(type: StreamType): void;
    /**
     * 🎯 Generic event listener (pub/sub style)
     * @param event - Event name to listen for
     * @param handler - Event handler function
     */
    on<T extends StreamType>(event: T, handler: (data: any) => void): () => void;
    /**
     * 🚀 Connect to AugmentOS Cloud
     * @param sessionId - Unique session identifier
     * @returns Promise that resolves when connected
     */
    connect(sessionId: string): Promise<void>;
    /**
     * 👋 Disconnect from AugmentOS Cloud
     */
    disconnect(): void;
    /**
     * 📨 Handle incoming messages from cloud
     */
    private handleMessage;
    /**
     * 🔐 Send connection initialization message
     */
    private sendConnectionInit;
    /**
     * 📝 Update subscription list with cloud
     */
    private updateSubscriptions;
    /**
     * 🔄 Handle reconnection with exponential backoff
     */
    private handleReconnection;
    /**
     * 📤 Send message to cloud
     * @throws {Error} If WebSocket is not connected
     */
    private send;
}
//# sourceMappingURL=index.d.ts.map